"use client";

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Navbar } from '@/components/landing/Navbar';
import { Footer } from '@/components/landing/Footer';
import { useRouter, useSearchParams } from 'next/navigation';
import { useLoader } from '@/lib/LoaderContext';
import { useRouteTransition } from '@/hooks/useRouteTransition';
import { useRealTimeData } from '@/hooks/useRealTimeData';
import AnalyticsChart from '@/components/dashboard/AnalyticsChart';
import { FetchingAnimation } from '@/components/ui/FetchingAnimation';

interface Client {
  _id: string;
  name: string;
  email: string;
  role: string;
  status: 'active' | 'inactive' | 'suspended';
  lastLogin?: string;
  createdAt: string;
  totalChargingSessions?: number;
  totalAmountSpent?: number;
  co2Saved?: number;
}

interface Station {
  _id: string;
  name: string;
  address: string;
  city: string;
  status: 'active' | 'maintenance' | 'inactive';
  totalSlots: number;
  availableSlots: number;
  createdAt: string;
}

interface Payment {
  _id: string;
  userId: string;
  stationId: string;
  orderId: string;
  amount: number;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
  currency: string;
  method?: string;
  createdAt: string;
}

interface Stat {
  id: string;
  name: string;
  value: number;
  change: number;
  color: string;
  icon: string;
}

// Helper function to render icons based on icon name
const renderIcon = (iconName: string) => {
  switch (iconName) {
    case 'user-group':
      return (
        <svg className="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
        </svg>
      );
    case 'lightning-bolt':
      return (
        <svg className="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        </svg>
      );
    case 'clock':
      return (
        <svg className="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      );
    case 'currency-rupee':
      return (
        <svg className="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 8h6m-5 0a3 3 0 110 6H9l3 3m-3-6h6m6 1a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      );
    case 'tree':
      return (
        <svg className="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
        </svg>
      );
    default:
      return (
        <svg className="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
        </svg>
      );
  }
};

export default function AdminDashboard() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();
  const { hideLoader, showLoader } = useLoader();
  const { isConnected, updates, joinUserRoom, data, loading, error } = useRealTimeData();
  const dataFetchedRef = useRef(false);
  
  // Initialize route transition handler
  useRouteTransition();

  // Get initial tab state from URL parameters
  const initialTab = searchParams.get('tab') || 'dashboard';
  const initialSubTab = searchParams.get('subTab') || 
    (initialTab === 'dashboard' ? 'overview' : 
     initialTab === 'clients' ? 'all' : 
     initialTab === 'stations' ? 'all' : 
     initialTab === 'payments' ? 'all' : 
     initialTab === 'reports' ? 'usage' : 
     initialTab === 'settings' ? 'general' : 'overview');

  const [activeTab, setActiveTab] = useState(initialTab);
  const [dashboardSubTab, setDashboardSubTab] = useState(initialTab === 'dashboard' ? initialSubTab : 'overview');
  const [clientsSubTab, setClientsSubTab] = useState(initialTab === 'clients' ? initialSubTab : 'all');
  const [stationsSubTab, setStationsSubTab] = useState(initialTab === 'stations' ? initialSubTab : 'all');
  const [paymentsSubTab, setPaymentsSubTab] = useState(initialTab === 'payments' ? initialSubTab : 'all');
  const [reportsSubTab, setReportsSubTab] = useState(initialTab === 'reports' ? initialSubTab : 'usage');
  const [settingsSubTab, setSettingsSubTab] = useState(initialTab === 'settings' ? initialSubTab : 'general');

  // Handle URL parameters for tab navigation
  useEffect(() => {
    const tab = searchParams.get('tab');
    const subTab = searchParams.get('subTab');
    
    if (tab && tab !== activeTab) {
      setActiveTab(tab);
    }
    
    if (subTab) {
      switch (tab || activeTab) {
        case 'dashboard':
          if (subTab !== dashboardSubTab) setDashboardSubTab(subTab);
          break;
        case 'clients':
          if (subTab !== clientsSubTab) setClientsSubTab(subTab);
          break;
        case 'stations':
          if (subTab !== stationsSubTab) setStationsSubTab(subTab);
          break;
        case 'payments':
          if (subTab !== paymentsSubTab) setPaymentsSubTab(subTab);
          break;
        case 'reports':
          if (subTab !== reportsSubTab) setReportsSubTab(subTab);
          break;
        case 'settings':
          if (subTab !== settingsSubTab) setSettingsSubTab(subTab);
          break;
        default:
          break;
      }
    }
  }, [searchParams, activeTab, dashboardSubTab, clientsSubTab, stationsSubTab, paymentsSubTab, reportsSubTab, settingsSubTab]);

  interface Stat {
    id: string;
    name: string;
    value: number;
    change: number;
    color: string;
    icon: string;
  }

  // Add new state variables for chart data after the existing state declarations
  // Real data from MongoDB
  const [stats, setStats] = useState<Stat[]>([]);
  const [clients, setClients] = useState<Client[]>([]);
  const [stations, setStations] = useState<Station[]>([]);
  const [payments, setPayments] = useState<Payment[]>([]);
  const [userGrowthData, setUserGrowthData] = useState<any[]>([]);
  const [revenueByCityData, setRevenueByCityData] = useState<any[]>([]);
  const [usageByCityData, setUsageByCityData] = useState<any[]>([]);
  const [errorState, setErrorState] = useState<string | null>(null);
  const [loadingState, setLoadingState] = useState(true);

  const fetchData = useCallback(async () => {
    if (status === 'authenticated' && session?.user?.role === 'admin' && !dataFetchedRef.current) {
      dataFetchedRef.current = true;
      
      // Show loader during data fetching
      showLoader("Loading dashboard data...");
      
      // Add timeout to ensure loader doesn't stay visible indefinitely
      const timeoutId = setTimeout(() => {
        setErrorState("Request timeout - please try again");
        hideLoader();
        setLoadingState(false);
      }, 10000); // 10 second timeout (reduced from 15 seconds)
      
      try {
        // Fetch dashboard stats with timeout
        const statsResponse = await Promise.race([
          fetch('/api/dashboard/stats'),
          new Promise<Response>((_, reject) => 
            setTimeout(() => reject(new Error('Stats fetch timeout')), 8000)
          )
        ]);
        
        let statsData = [];
        if (statsResponse.ok) {
          statsData = await statsResponse.json();
        } else {
          const errorData = await statsResponse.json();
          throw new Error(errorData.error || 'Failed to fetch dashboard stats');
        }
        
        // Fetch clients with timeout
        const clientsResponse = await Promise.race([
          fetch('/api/clients'),
          new Promise<Response>((_, reject) => 
            setTimeout(() => reject(new Error('Clients fetch timeout')), 8000)
          )
        ]);
        
        let clientsData = [];
        if (clientsResponse.ok) {
          const clientsResult = await clientsResponse.json();
          clientsData = clientsResult.data || [];
        } else {
          const errorData = await clientsResponse.json();
          throw new Error(errorData.error || 'Failed to fetch clients');
        }
        
        // Fetch stations with timeout
        const stationsResponse = await Promise.race([
          fetch('/api/stations'),
          new Promise<Response>((_, reject) => 
            setTimeout(() => reject(new Error('Stations fetch timeout')), 8000)
          )
        ]);
        
        let stationsData = [];
        if (stationsResponse.ok) {
          const stationsResult = await stationsResponse.json();
          stationsData = stationsResult.data || [];
        } else {
          const errorData = await stationsResponse.json();
          throw new Error(errorData.error || 'Failed to fetch stations');
        }
        
        // Fetch payments with timeout
        const paymentsResponse = await Promise.race([
          fetch('/api/payments'),
          new Promise<Response>((_, reject) => 
            setTimeout(() => reject(new Error('Payments fetch timeout')), 8000)
          )
        ]);
        
        let paymentsData = [];
        if (paymentsResponse.ok) {
          const paymentsResult = await paymentsResponse.json();
          paymentsData = paymentsResult.data || [];
        } else {
          const errorData = await paymentsResponse.json();
          throw new Error(errorData.error || 'Failed to fetch payments');
        }
        
        // Fetch chart data
        const chartDataResponse = await fetch('/api/dashboard/charts');
        let chartData: any = {};
        if (chartDataResponse.ok) {
          chartData = await chartDataResponse.json();
        }
        
        setStats(statsData);
        setClients(clientsData);
        setStations(stationsData);
        setPayments(paymentsData);
        setUserGrowthData(chartData.userGrowth || []);
        setRevenueByCityData(chartData.revenueByCity || []);
        setUsageByCityData(chartData.usageByCity || []);
        
        // Clear timeout if data fetching completes successfully
        clearTimeout(timeoutId);
        
        setLoadingState(false);
        // Keep the loader visible until the component is fully rendered
        // This ensures smooth transition without any background flash
        setTimeout(() => {
          hideLoader(); // Hide loader after data is fetched and UI is ready
        }, 500);
      } catch (err: any) {
        console.error('Error fetching dashboard data:', err);
        setErrorState(err.message || 'Failed to fetch dashboard data. Please check your network connection and try again.');
        setLoadingState(false);
        // Keep the loader visible a bit longer to show error state
        setTimeout(() => {
          hideLoader(); // Hide loader even if there's an error
        }, 500);
      }
    }
  }, [status, session, showLoader, hideLoader]);

  // Fetch data on component mount - with proper dependencies
  useEffect(() => {
    if (status === 'authenticated' && session?.user?.role === 'admin' && !dataFetchedRef.current) {
      fetchData();
    } else if (status !== 'loading' && (!session || session.user?.role !== 'admin')) {
      // Hide loader and redirect if not authenticated or not admin
      hideLoader();
      setLoadingState(false);
    }
  }, [status, session, fetchData]);

  // Redirect if not authenticated or not admin
  useEffect(() => {
    if (status === 'loading') return;

    if (!session || session.user?.role !== 'admin') {
      hideLoader();
      router.push('/unauthorized');
    }
  }, [session, status, router, hideLoader]);

  // Handle real-time updates
  useEffect(() => {
    if (session?.user?.id) {
      joinUserRoom(session.user.id);
    }
  }, [session, joinUserRoom]);

  // Helper function to update URL parameters
  const updateUrl = (tab: string, subTab: string) => {
    const params = new URLSearchParams(window.location.search);
    params.set('tab', tab);
    params.set('subTab', subTab);
    window.history.replaceState({}, '', `${window.location.pathname}?${params}`);
  };

  // Helper function to safely get property values
  const getSafeProperty = (obj: any, prop: string, defaultValue: any) => {
    if (obj && typeof obj === 'object' && obj.hasOwnProperty(prop) && obj[prop] !== null && obj[prop] !== undefined) {
      return obj[prop];
    }
    return defaultValue;
  };

  // Handle real-time updates with enhanced logic
  useEffect(() => {
    if (updates.length > 0) {
      const latestUpdate: any = updates[updates.length - 1];
      
      if (latestUpdate) {
        switch (latestUpdate.event) {
          case 'client_update':
            // Refresh clients data immediately for real-time updates
            // For better performance, update the local state directly instead of refetching all data
            if (latestUpdate.fullDocument) {
              setClients(prevClients => {
                const existingClientIndex = prevClients.findIndex(client => client._id === latestUpdate.fullDocument?._id);
                if (existingClientIndex >= 0 && latestUpdate.fullDocument) {
                  // Update existing client
                  const updatedClients = [...prevClients];
                  const fullDocument = latestUpdate.fullDocument;
                  if (fullDocument && typeof fullDocument === 'object') {
                    updatedClients[existingClientIndex] = {
                      ...updatedClients[existingClientIndex],
                      ...fullDocument,
                      createdAt: fullDocument?.createdAt !== undefined && fullDocument?.createdAt !== null ? fullDocument?.createdAt : updatedClients[existingClientIndex].createdAt,
                      lastLogin: fullDocument?.lastLogin !== undefined && fullDocument?.lastLogin !== null ? fullDocument?.lastLogin : updatedClients[existingClientIndex].lastLogin
                    };
                  }
                  return updatedClients;
                } else if (latestUpdate.fullDocument) {
                  // Add new client
                  const fullDocument = latestUpdate.fullDocument;
                  if (fullDocument && typeof fullDocument === 'object') {
                    return [...prevClients, {
                      _id: fullDocument._id,
                      name: fullDocument.name || 'Unknown',
                      email: fullDocument.email || '',
                      role: fullDocument.role || 'user',
                      status: fullDocument.status || 'active',
                      lastLogin: fullDocument.lastLogin,
                      createdAt: fullDocument.createdAt || new Date().toISOString()
                    }];
                  } else {
                    return prevClients;
                  }
                } else {
                  return prevClients;
                }
              });
            }
            break;
            
          case 'charging_session_update':
            // For charging sessions, we might want to update related client data
            // In a real implementation, you might have a separate sessions state
            console.log('Charging session updated:', latestUpdate);
            break;
            
          case 'payment_update':
            // Update payments data in real-time
            if (latestUpdate.fullDocument) {
              setPayments(prevPayments => {
                const existingPaymentIndex = prevPayments.findIndex(payment => payment._id === latestUpdate.fullDocument?._id);
                if (existingPaymentIndex >= 0 && latestUpdate.fullDocument) {
                  // Update existing payment
                  const updatedPayments = [...prevPayments];
                  const fullDocument = latestUpdate.fullDocument;
                  if (fullDocument && typeof fullDocument === 'object') {
                    updatedPayments[existingPaymentIndex] = {
                      ...updatedPayments[existingPaymentIndex],
                      ...fullDocument,
                      createdAt: fullDocument?.createdAt !== undefined && fullDocument?.createdAt !== null ? fullDocument?.createdAt : updatedPayments[existingPaymentIndex].createdAt
                    };
                  }
                  return updatedPayments;
                } else if (latestUpdate.fullDocument) {
                  // Add new payment
                  const fullDocument = latestUpdate.fullDocument;
                  if (fullDocument && typeof fullDocument === 'object') {
                    return [...prevPayments, {
                      _id: fullDocument._id,
                      userId: fullDocument.userId || '',
                      stationId: fullDocument.stationId || '',
                      orderId: fullDocument.orderId || '',
                      amount: fullDocument.amount || 0,
                      status: fullDocument.status || 'pending',
                      currency: fullDocument.currency || 'INR',
                      method: fullDocument.method,
                      createdAt: fullDocument.createdAt || new Date().toISOString()
                    }];
                  } else {
                    return prevPayments;
                  }
                } else {
                  return prevPayments;
                }
              });
              
              // Refresh chart data when payments change
              fetch('/api/dashboard/charts?type=revenue-by-city')
                .then(response => response.json())
                .then(data => {
                  if (data.revenueByCity) {
                    setRevenueByCityData(data.revenueByCity);
                  }
                })
                .catch(error => {
                  console.error('Error fetching updated revenue by city data:', error);
                });
            }
            break;
            
          case 'eco_stats_update':
            // Refresh stats data from Redis cache
            // Instead of refetching all data, we can listen to Redis updates directly
            fetch('/api/dashboard/stats')
              .then(response => response.json())
              .then(statsData => {
                setStats(statsData);
              })
              .catch(error => {
                console.error('Error fetching updated stats:', error);
              });
              
            // Refresh chart data when eco stats change
            fetch('/api/dashboard/charts')
              .then(response => response.json())
              .then(data => {
                if (data.userGrowth) {
                  setUserGrowthData(data.userGrowth);
                }
                if (data.revenueByCity) {
                  setRevenueByCityData(data.revenueByCity);
                }
                if (data.usageByCity) {
                  setUsageByCityData(data.usageByCity);
                }
              })
              .catch(error => {
                console.error('Error fetching updated chart data:', error);
              });
            break;
            
          default:
            console.log('Unknown update event:', latestUpdate.event);
        }
      }
    }
  }, [updates]);

        {/* Main content - Mobile-first responsive design */}
        <div className="flex-1 flex flex-col overflow-hidden w-full">
          {/* Page content - Mobile-first responsive design */}
          <main className="flex-1 overflow-y-auto p-4 md:p-6 w-full">
            <div className="max-w-full mx-auto w-full">
              {/* Dashboard view */}
              {activeTab === 'dashboard' && (
                <div className="w-full">
                  <div className="mb-6">
                    <h1 className="text-3xl font-bold text-white mb-2">Admin Dashboard</h1>
                    <p className="text-[#94A3B8] text-xl">Your central control panel to manage, monitor, and master the system with ease.</p>
                    <p className="text-[#94A3B8] mt-2">Welcome, {session?.user?.name || 'Admin'}. Here's what's happening today.</p>
                  </div>
                  
                  {/* Sub-tabs for Dashboard - Mobile-first responsive design */}
                  <div className="mb-6 border-b border-[#334155] overflow-x-auto">
                    <nav className="flex space-x-4 md:space-x-6 min-w-max md:min-w-0">
                      <button
                        onClick={() => {
                          setDashboardSubTab('overview');
                          updateUrl('dashboard', 'overview');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          dashboardSubTab === 'overview'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Overview
                      </button>
                      <button
                        onClick={() => {
                          setDashboardSubTab('analytics');
                          updateUrl('dashboard', 'analytics');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          dashboardSubTab === 'analytics'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Analytics
                      </button>
                      <button
                        onClick={() => {
                          setDashboardSubTab('activity');
                          updateUrl('dashboard', 'activity');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          dashboardSubTab === 'activity'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Recent Activity
                      </button>
                    </nav>
                  </div>

                  {/* Dashboard content based on sub-tab */}
                  {dashboardSubTab === 'overview' && (
                    <div className="w-full">
                      {/* Stats cards - Updated to show Users, Stations, Locations, Revenue */}
                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-6 md:mb-8">
                        {stats.map((stat) => (
                          <Card key={stat.id} className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6 hover:border-[#8B5CF6] transition-colors duration-200">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-[#94A3B8]">{stat.name}</p>
                                <p className="text-xl md:text-2xl font-bold text-white mt-1">{stat.value.toLocaleString()}</p>
                                <p className={`text-xs md:text-sm mt-1 ${stat.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                                  {stat.change >= 0 ? '↑' : '↓'} {Math.abs(stat.change)}% from last month
                                </p>
                              </div>
                              <div className={`w-10 h-10 md:w-12 md:h-12 rounded-lg bg-gradient-to-r ${stat.color} flex items-center justify-center text-white`}>
                                {renderIcon(stat.icon)}
                              </div>
                            </div>
                          </Card>
                        ))}
                      </div>
                      
                      {/* Charts and reports - Mobile-first responsive design */}
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-6 md:mb-8">
                        <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                          <AnalyticsChart 
                            type="line" 
                            data={userGrowthData}
                            dataKey="value" 
                            title="User Growth"
                          />
                        </Card>
                        
                        <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                          <AnalyticsChart 
                            type="bar" 
                            data={revenueByCityData}
                            dataKey="value" 
                            title="Revenue Overview"
                          />
                        </Card>
                      </div>
                    </div>
                  )}
                  
                  {dashboardSubTab === 'analytics' && (
                    <div className="w-full">
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-6">
                        <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                          <AnalyticsChart 
                            type="line" 
                            data={userGrowthData}
                            dataKey="value" 
                            title="User Growth"
                          />
                        </Card>
                        <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                          <AnalyticsChart 
                            type="bar" 
                            data={usageByCityData}
                            dataKey="users"
                            title="User and Charging Usage per City"
                          />
                        </Card>
                      </div>
                    </div>
                  )}
                  
                  {dashboardSubTab === 'activity' && (
                    <div className="w-full">
                      {/* Recent activity - Mobile-first responsive design */}
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
                        <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                          <h3 className="text-lg font-bold text-white mb-4 md:mb-6">Recent Clients</h3>
                          <div className="space-y-3 md:space-y-4">
                            {clients.slice(0, 4).map((client) => (
                              <div key={client._id} className="flex items-center justify-between">
                                <div className="flex items-center">
                                  <div className="w-8 h-8 md:w-10 md:h-10 rounded-full bg-gradient-to-r from-[#8B5CF6] to-[#10B981] flex items-center justify-center text-white text-xs md:text-sm font-medium mr-2 md:mr-3">
                                    {client.name.charAt(0)}
                                  </div>
                                  <div>
                                    <p className="text-white font-medium text-sm md:text-base">{client.name}</p>
                                    <p className="text-[#94A3B8] text-xs md:text-sm">{client.email}</p>
                                  </div>
                                </div>
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  client.status === 'active' 
                                    ? 'bg-green-900/30 text-green-400' 
                                    : client.status === 'suspended'
                                      ? 'bg-red-900/30 text-red-400'
                                      : 'bg-yellow-900/30 text-yellow-400'
                                }`}>
                                  {client.status}
                                </span>
                              </div>
                            ))}
                          </div>
                        </Card>
                        
                        <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                          <h3 className="text-lg font-bold text-white mb-4 md:mb-6">Recent Payments</h3>
                          <div className="space-y-3 md:space-y-4">
                            {payments.slice(0, 4).map((payment) => (
                              <div key={payment._id} className="flex items-center justify-between">
                                <div>
                                  <p className="text-white font-medium text-sm md:text-base">₹{payment.amount}</p>
                                  <p className="text-[#94A3B8] text-xs md:text-sm">
                                    {new Date(payment.createdAt).toLocaleDateString()}
                                  </p>
                                </div>
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  payment.status === 'completed' 
                                    ? 'bg-green-900/30 text-green-400' 
                                    : payment.status === 'failed'
                                      ? 'bg-red-900/30 text-red-400'
                                      : payment.status === 'refunded'
                                        ? 'bg-blue-900/30 text-blue-400'
                                        : 'bg-yellow-900/30 text-yellow-400'
                                }`}>
                                  {payment.status}
                                </span>
                              </div>
                            ))}
                          </div>
                        </Card>
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {/* Clients view - Mobile-first responsive design */}
              {activeTab === 'clients' && (
                <div className="w-full">
                  <div className="mb-6">
                    <h1 className="text-3xl font-bold text-white mb-2">Client Management</h1>
                    <p className="text-[#94A3B8] text-xl">Manage client accounts and permissions</p>
                  </div>
                  <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4 md:mb-6">
                    <div>
                      <h2 className="text-xl md:text-2xl font-bold text-white mb-1 md:mb-2">Clients</h2>
                      <p className="text-[#94A3B8] text-sm md:text-base">Manage all client accounts in the system</p>
                    </div>
                    <Button className="mt-3 md:mt-0 bg-gradient-to-r from-[#8B5CF6] to-[#10B981] hover:from-[#7C3AED] hover:to-[#059669] text-white text-sm md:text-base">
                      <svg className="w-4 h-4 mr-1 md:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      Add Client
                    </Button>
                  </div>
                  
                  {/* Sub-tabs for Clients - Mobile-first responsive design */}
                  <div className="mb-4 md:mb-6 border-b border-[#334155] overflow-x-auto">
                    <nav className="flex space-x-4 md:space-x-6 min-w-max md:min-w-0">
                      <button
                        onClick={() => {
                          setClientsSubTab('all');
                          updateUrl('clients', 'all');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          clientsSubTab === 'all'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        All Clients
                      </button>
                      <button
                        onClick={() => {
                          setClientsSubTab('active');
                          updateUrl('clients', 'active');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          clientsSubTab === 'active'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Active
                      </button>
                      <button
                        onClick={() => {
                          setClientsSubTab('inactive');
                          updateUrl('clients', 'inactive');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          clientsSubTab === 'inactive'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Inactive
                      </button>
                      <button
                        onClick={() => {
                          setClientsSubTab('suspended');
                          updateUrl('clients', 'suspended');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          clientsSubTab === 'suspended'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Suspended
                      </button>
                    </nav>
                  </div>

                  <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4 md:mb-6">
                      <div className="relative mb-3 md:mb-0 md:mr-3 w-full md:w-auto">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <svg className="h-4 w-4 md:h-5 md:w-5 text-[#94A3B8]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                          </svg>
                        </div>
                        <input
                          type="text"
                          placeholder="Search clients..."
                          className="block w-full pl-9 pr-3 py-2 rounded-lg bg-[#0F172A] border border-[#334155] text-white placeholder-[#94A3B8] focus:outline-none focus:ring-2 focus:ring-[#8B5CF6] focus:border-transparent text-sm md:text-base"
                        />
                      </div>
                      <div className="flex space-x-2 w-full md:w-auto">
                        <Button variant="outline" size="sm" className="flex-1 md:flex-none">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Filter</span>
                        </Button>
                        <Button variant="outline" size="sm" className="flex-1 md:flex-none">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Export</span>
                        </Button>
                      </div>
                    </div>
                    
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b border-[#334155]">
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Client</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm hidden md:table-cell">Email</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Role</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Status</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm hidden lg:table-cell">Last Login</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {clients.map((client) => (
                            <tr key={client._id} className="border-b border-[#334155] hover:bg-[#0F172A]/30">
                              <td className="py-3 md:py-4">
                                <div className="flex items-center">
                                  <div className="w-8 h-8 md:w-10 md:h-10 rounded-full bg-gradient-to-r from-[#8B5CF6] to-[#10B981] flex items-center justify-center text-white text-xs md:text-sm font-medium mr-2 md:mr-3">
                                    {client.name.charAt(0)}
                                  </div>
                                  <div>
                                    <span className="text-white text-sm md:text-base block">{client.name}</span>
                                    <span className="text-[#94A3B8] text-xs md:hidden">{client.email}</span>
                                  </div>
                                </div>
                              </td>
                              <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm hidden md:table-cell">{client.email}</td>
                              <td className="py-3 md:py-4">
                                <span className="px-2 py-1 text-xs rounded-full bg-blue-900/30 text-blue-400">
                                  {client.role}
                                </span>
                              </td>
                              <td className="py-3 md:py-4">
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  client.status === 'active' 
                                    ? 'bg-green-900/30 text-green-400' 
                                    : client.status === 'suspended'
                                      ? 'bg-red-900/30 text-red-400'
                                      : 'bg-yellow-900/30 text-yellow-400'
                                }`}>
                                  {client.status}
                                </span>
                              </td>
                              <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm hidden lg:table-cell">
                                {client.lastLogin ? new Date(client.lastLogin).toLocaleDateString() : 'Never'}
                              </td>
                              <td className="py-3 md:py-4">
                                <div className="flex space-x-1">
                                  <Button variant="outline" size="sm" className="p-1 md:p-2">
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                  </Button>
                                  <Button variant="outline" size="sm" className="p-1 md:p-2">
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                  </Button>
                                  <Button variant="outline" size="sm" className="p-1 md:p-2 text-red-400 hover:text-red-300">
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                  </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between mt-4 md:mt-6">
                      <p className="text-[#94A3B8] text-xs md:text-sm mb-3 md:mb-0">Showing 1 to {clients.length} of {clients.length} results</p>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm" disabled className="text-xs md:text-sm">Previous</Button>
                        <Button variant="outline" size="sm" className="text-xs md:text-sm">Next</Button>
                      </div>
                    </div>
                  </Card>
                </div>
              )}
              
              {/* Stations view - Mobile-first responsive design */}
              {activeTab === 'stations' && (
                <div className="w-full">
                  <div className="mb-6">
                    <h1 className="text-3xl font-bold text-white mb-2">Station Management</h1>
                    <p className="text-[#94A3B8] text-xl">Add, edit, or remove charging stations</p>
                  </div>
                  <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4 md:mb-6">
                    <div>
                      <h2 className="text-xl md:text-2xl font-bold text-white mb-1 md:mb-2">Stations</h2>
                      <p className="text-[#94A3B8] text-sm md:text-base">Manage all charging stations in the network</p>
                    </div>
                    <Button className="mt-3 md:mt-0 bg-gradient-to-r from-[#8B5CF6] to-[#10B981] hover:from-[#7C3AED] hover:to-[#059669] text-white text-sm md:text-base">
                      <svg className="w-4 h-4 mr-1 md:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      Add Station
                    </Button>
                  </div>
                  
                  {/* Sub-tabs for Stations - Mobile-first responsive design */}
                  <div className="mb-4 md:mb-6 border-b border-[#334155] overflow-x-auto">
                    <nav className="flex space-x-4 md:space-x-6 min-w-max md:min-w-0">
                      <button
                        onClick={() => {
                          setStationsSubTab('all');
                          updateUrl('stations', 'all');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          stationsSubTab === 'all'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        All Stations
                      </button>
                      <button
                        onClick={() => {
                          setStationsSubTab('active');
                          updateUrl('stations', 'active');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          stationsSubTab === 'active'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Active
                      </button>
                      <button
                        onClick={() => {
                          setStationsSubTab('maintenance');
                          updateUrl('stations', 'maintenance');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          stationsSubTab === 'maintenance'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Maintenance
                      </button>
                      <button
                        onClick={() => {
                          setStationsSubTab('inactive');
                          updateUrl('stations', 'inactive');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          stationsSubTab === 'inactive'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Inactive
                      </button>
                    </nav>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-6 md:mb-8">
                    {stations.map((station) => (
                      <Card key={station._id} className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6 hover:border-[#8B5CF6] transition-colors duration-200">
                        <div className="flex items-center justify-between mb-3 md:mb-4">
                          <h3 className="text-base md:text-lg font-bold text-white truncate">{station.name}</h3>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            station.status === 'active' 
                              ? 'bg-green-900/30 text-green-400' 
                              : station.status === 'maintenance'
                                ? 'bg-yellow-900/30 text-yellow-400'
                                : 'bg-red-900/30 text-red-400'
                          }`}>
                            {station.status}
                          </span>
                        </div>
                        <p className="text-[#94A3B8] text-sm md:text-base mb-2">{station.address}</p>
                        <p className="text-[#94A3B8] text-xs md:text-sm mb-3 md:mb-4">{station.city}</p>
                        <div className="flex items-center justify-between mb-3 md:mb-4">
                          <div>
                            <p className="text-xs md:text-sm text-[#94A3B8]">Slots</p>
                            <p className="text-white font-medium text-sm md:text-base">{station.totalSlots}</p>
                          </div>
                          <div>
                            <p className="text-xs md:text-sm text-[#94A3B8]">Available</p>
                            <p className="text-white font-medium text-sm md:text-base">{station.availableSlots}</p>
                          </div>
                        </div>
                        <div className="flex space-x-2">
                          <Button variant="outline" size="sm" className="flex-1 text-xs md:text-sm">
                            <svg className="w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            Edit
                          </Button>
                          <Button variant="outline" size="sm" className="flex-1 text-red-400 hover:text-red-300 text-xs md:text-sm">
                            <svg className="w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Remove
                          </Button>
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Payments view - Mobile-first responsive design */}
              {activeTab === 'payments' && (
                <div className="w-full">
                  <div className="mb-6">
                    <h1 className="text-3xl font-bold text-white mb-2">Payment Management</h1>
                    <p className="text-[#94A3B8] text-xl">Track, verify, and manage payments</p>
                  </div>
                  <div className="mb-4 md:mb-6">
                    <h2 className="text-xl md:text-2xl font-bold text-white mb-1 md:mb-2">Payments</h2>
                    <p className="text-[#94A3B8] text-sm md:text-base">Monitor all payment transactions in the system</p>
                  </div>
                  
                  {/* Sub-tabs for Payments - Mobile-first responsive design */}
                  <div className="mb-4 md:mb-6 border-b border-[#334155] overflow-x-auto">
                    <nav className="flex space-x-4 md:space-x-6 min-w-max md:min-w-0">
                      <button
                        onClick={() => {
                          setPaymentsSubTab('all');
                          updateUrl('payments', 'all');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          paymentsSubTab === 'all'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        All Payments
                      </button>
                      <button
                        onClick={() => {
                          setPaymentsSubTab('completed');
                          updateUrl('payments', 'completed');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          paymentsSubTab === 'completed'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Completed
                      </button>
                      <button
                        onClick={() => {
                          setPaymentsSubTab('pending');
                          updateUrl('payments', 'pending');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          paymentsSubTab === 'pending'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Pending
                      </button>
                      <button
                        onClick={() => {
                          setPaymentsSubTab('failed');
                          updateUrl('payments', 'failed');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          paymentsSubTab === 'failed'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Failed
                      </button>
                      <button
                        onClick={() => {
                          setPaymentsSubTab('refunded');
                          updateUrl('payments', 'refunded');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          paymentsSubTab === 'refunded'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Refunded
                      </button>
                    </nav>
                  </div>

                  <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4 md:mb-6">
                      <div className="relative mb-3 md:mb-0 md:mr-3 w-full md:w-auto">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <svg className="h-4 w-4 md:h-5 md:w-5 text-[#94A3B8]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                          </svg>
                        </div>
                        <input
                          type="text"
                          placeholder="Search payments..."
                          className="block w-full pl-9 pr-3 py-2 rounded-lg bg-[#0F172A] border border-[#334155] text-white placeholder-[#94A3B8] focus:outline-none focus:ring-2 focus:ring-[#8B5CF6] focus:border-transparent text-sm md:text-base"
                        />
                      </div>
                      <div className="flex space-x-2 w-full md:w-auto">
                        <Button variant="outline" size="sm" className="flex-1 md:flex-none">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Filter</span>
                        </Button>
                        <Button variant="outline" size="sm" className="flex-1 md:flex-none">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Export</span>
                        </Button>
                      </div>
                    </div>
                    
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b border-[#334155]">
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Payment ID</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm hidden md:table-cell">Client</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Amount</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Status</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Date</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {payments.map((payment) => (
                            <tr key={payment._id} className="border-b border-[#334155] hover:bg-[#0F172A]/30">
                              <td className="py-3 md:py-4 text-white text-xs md:text-sm">#{payment.orderId.substring(0, 8)}</td>
                              <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm hidden md:table-cell">Client {payment.userId.substring(0, 8)}</td>
                              <td className="py-3 md:py-4 text-white text-xs md:text-sm">₹{payment.amount}</td>
                              <td className="py-3 md:py-4">
                                <span className={`px-2 py-1 text-xs rounded-full ${
                                  payment.status === 'completed' 
                                    ? 'bg-green-900/30 text-green-400' 
                                    : payment.status === 'failed'
                                      ? 'bg-red-900/30 text-red-400'
                                      : payment.status === 'refunded'
                                        ? 'bg-blue-900/30 text-blue-400'
                                        : 'bg-yellow-900/30 text-yellow-400'
                                }`}>
                                  {payment.status}
                                </span>
                              </td>
                              <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">
                                {new Date(payment.createdAt).toLocaleDateString()}
                              </td>
                              <td className="py-3 md:py-4">
                                <div className="flex space-x-1">
                                  <Button variant="outline" size="sm" className="p-1 md:p-2">
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                  </Button>
                                  {payment.status === 'completed' && (
                                    <Button variant="outline" size="sm" className="p-1 md:p-2 text-blue-400 hover:text-blue-300">
                                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                      </svg>
                                    </Button>
                                  )}
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between mt-4 md:mt-6">
                      <p className="text-[#94A3B8] text-xs md:text-sm mb-3 md:mb-0">Showing 1 to {payments.length} of {payments.length} results</p>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm" disabled className="text-xs md:text-sm">Previous</Button>
                        <Button variant="outline" size="sm" className="text-xs md:text-sm">Next</Button>
                      </div>
                    </div>
                  </Card>
                </div>
              )}
              
              {/* Reports view - Mobile-first responsive design */}
              {activeTab === 'reports' && (
                <div className="w-full">
                  <div className="mb-6">
                    <h1 className="text-3xl font-bold text-white mb-2">System Reports</h1>
                    <p className="text-[#94A3B8] text-xl">Detailed analytics and performance reports</p>
                  </div>
                  <div className="mb-4 md:mb-6">
                    <h2 className="text-xl md:text-2xl font-bold text-white mb-1 md:mb-2">Reports</h2>
                    <p className="text-[#94A3B8] text-sm md:text-base">Comprehensive system analytics and performance metrics</p>
                  </div>
                  
                  {/* Sub-tabs for Reports - Mobile-first responsive design */}
                  <div className="mb-4 md:mb-6 border-b border-[#334155] overflow-x-auto">
                    <nav className="flex space-x-4 md:space-x-6 min-w-max md:min-w-0">
                      <button
                        onClick={() => {
                          setReportsSubTab('usage');
                          updateUrl('reports', 'usage');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          reportsSubTab === 'usage'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Usage Reports
                      </button>
                      <button
                        onClick={() => {
                          setReportsSubTab('financial');
                          updateUrl('reports', 'financial');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          reportsSubTab === 'financial'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Financial
                      </button>
                      <button
                        onClick={() => {
                          setReportsSubTab('performance');
                          updateUrl('reports', 'performance');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          reportsSubTab === 'performance'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Performance
                      </button>
                      <button
                        onClick={() => {
                          setReportsSubTab('export');
                          updateUrl('reports', 'export');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          reportsSubTab === 'export'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Export Data
                      </button>
                    </nav>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-6 md:mb-8">
                    <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                      <AnalyticsChart 
                        type="line" 
                        data={userGrowthData}
                        dataKey="value" 
                        title="Usage Statistics"
                      />
                      <div className="flex justify-end mt-4">
                        <Button variant="outline" size="sm">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Export</span>
                        </Button>
                      </div>
                    </Card>
                    
                    <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                      <AnalyticsChart 
                        type="bar" 
                        data={revenueByCityData}
                        dataKey="value" 
                        title="Revenue Analysis"
                      />
                      <div className="flex justify-end mt-4">
                        <Button variant="outline" size="sm">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Export</span>
                        </Button>
                      </div>
                    </Card>
                  </div>
                  
                  <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                    <div className="flex items-center justify-between mb-4 md:mb-6">
                      <h3 className="text-lg font-bold text-white">Detailed Reports</h3>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Filter</span>
                        </Button>
                        <Button variant="outline" size="sm">
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                          </svg>
                          <span className="hidden md:inline ml-1">Export</span>
                        </Button>
                      </div>
                    </div>
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b border-[#334155]">
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Report</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Date Range</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Status</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Generated</th>
                            <th className="py-2 md:py-3 text-left text-[#94A3B8] font-medium text-xs md:text-sm">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr className="border-b border-[#334155] hover:bg-[#0F172A]/30">
                            <td className="py-3 md:py-4 text-white text-sm md:text-base">Monthly Usage Report</td>
                            <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">Jan 2023 - Dec 2023</td>
                            <td className="py-3 md:py-4">
                              <span className="px-2 py-1 text-xs rounded-full bg-green-900/30 text-green-400">Completed</span>
                            </td>
                            <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">Dec 31, 2023</td>
                            <td className="py-3 md:py-4">
                              <Button variant="outline" size="sm" className="text-xs md:text-sm">
                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                </svg>
                                Download
                              </Button>
                            </td>
                          </tr>
                          <tr className="border-b border-[#334155] hover:bg-[#0F172A]/30">
                            <td className="py-3 md:py-4 text-white text-sm md:text-base">Quarterly Financial Report</td>
                            <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">Oct 2023 - Dec 2023</td>
                            <td className="py-3 md:py-4">
                              <span className="px-2 py-1 text-xs rounded-full bg-yellow-900/30 text-yellow-400">Processing</span>
                            </td>
                            <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">-</td>
                            <td className="py-3 md:py-4">
                              <Button variant="outline" size="sm" disabled className="text-xs md:text-sm">
                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                </svg>
                                Download
                              </Button>
                            </td>
                          </tr>
                          <tr className="border-b border-[#334155] hover:bg-[#0F172A]/30">
                            <td className="py-3 md:py-4 text-white text-sm md:text-base">Annual Performance Report</td>
                            <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">Jan 2023 - Dec 2023</td>
                            <td className="py-3 md:py-4">
                              <span className="px-2 py-1 text-xs rounded-full bg-red-900/30 text-red-400">Failed</span>
                            </td>
                            <td className="py-3 md:py-4 text-[#94A3B8] text-xs md:text-sm">-</td>
                            <td className="py-3 md:py-4">
                              <Button variant="outline" size="sm" className="text-xs md:text-sm">
                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                                Retry
                              </Button>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </Card>
                </div>
              )}
              
              {/* Settings view - Mobile-first responsive design */}
              {activeTab === 'settings' && (
                <div className="w-full">
                  <div className="mb-6">
                    <h1 className="text-3xl font-bold text-white mb-2">System Settings</h1>
                    <p className="text-[#94A3B8] text-xl">Configure application behavior and preferences</p>
                  </div>
                  <div className="mb-4 md:mb-6">
                    <h2 className="text-xl md:text-2xl font-bold text-white mb-1 md:mb-2">Settings</h2>
                    <p className="text-[#94A3B8] text-sm md:text-base">Manage system configuration and preferences</p>
                  </div>
                  
                  {/* Sub-tabs for Settings - Mobile-first responsive design */}
                  <div className="mb-4 md:mb-6 border-b border-[#334155] overflow-x-auto">
                    <nav className="flex space-x-4 md:space-x-6 min-w-max md:min-w-0">
                      <button
                        onClick={() => {
                          setSettingsSubTab('general');
                          updateUrl('settings', 'general');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          settingsSubTab === 'general'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        General
                      </button>
                      <button
                        onClick={() => {
                          setSettingsSubTab('security');
                          updateUrl('settings', 'security');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          settingsSubTab === 'security'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Security
                      </button>
                      <button
                        onClick={() => {
                          setSettingsSubTab('notifications');
                          updateUrl('settings', 'notifications');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          settingsSubTab === 'notifications'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Notifications
                      </button>
                      <button
                        onClick={() => {
                          setSettingsSubTab('integrations');
                          updateUrl('settings', 'integrations');
                        }}
                        className={`py-2 px-1 text-sm font-medium whitespace-nowrap ${
                          settingsSubTab === 'integrations'
                            ? 'text-[#8B5CF6] border-b-2 border-[#8B5CF6]'
                            : 'text-[#94A3B8] hover:text-white'
                        }`}
                      >
                        Integrations
                      </button>
                    </nav>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6">
                    <div className="lg:col-span-2">
                      <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                        <h3 className="text-lg font-bold text-white mb-4 md:mb-6">General Settings</h3>
                        <div className="space-y-4 md:space-y-6">
                          <div>
                            <label className="block text-sm font-medium text-[#94A3B8] mb-1">Application Name</label>
                            <input
                              type="text"
                              defaultValue="EV Bunker Admin"
                              className="w-full px-3 py-2 rounded-lg bg-[#0F172A] border border-[#334155] text-white placeholder-[#94A3B8] focus:outline-none focus:ring-2 focus:ring-[#8B5CF6] focus:border-transparent"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-[#94A3B8] mb-1">Contact Email</label>
                            <input
                              type="email"
                              defaultValue="admin@evbunker.com"
                              className="w-full px-3 py-2 rounded-lg bg-[#0F172A] border border-[#334155] text-white placeholder-[#94A3B8] focus:outline-none focus:ring-2 focus:ring-[#8B5CF6] focus:border-transparent"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-[#94A3B8] mb-1">Timezone</label>
                            <select className="w-full px-3 py-2 rounded-lg bg-[#0F172A] border border-[#334155] text-white focus:outline-none focus:ring-2 focus:ring-[#8B5CF6] focus:border-transparent">
                              <option>UTC</option>
                              <option>IST (UTC+5:30)</option>
                              <option>PST (UTC-8)</option>
                              <option>EST (UTC-5)</option>
                            </select>
                          </div>
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-white font-medium">Maintenance Mode</p>
                              <p className="text-[#94A3B8] text-sm">Temporarily disable the application for maintenance</p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                              <input type="checkbox" className="sr-only peer" />
                              <div className="w-11 h-6 bg-[#334155] peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[#8B5CF6]"></div>
                            </label>
                          </div>
                        </div>
                        <div className="mt-6">
                          <Button className="bg-gradient-to-r from-[#8B5CF6] to-[#10B981] hover:from-[#7C3AED] hover:to-[#059669] text-white">
                            Save Changes
                          </Button>
                        </div>
                      </Card>
                    </div>
                    
                    <div>
                      <Card className="bg-[#1E293B]/50 border border-[#334155] rounded-xl p-4 md:p-6">
                        <h3 className="text-lg font-bold text-white mb-4 md:mb-6">Quick Actions</h3>
                        <div className="space-y-3 md:space-y-4">
                          <button className="w-full text-left px-4 py-3 rounded-lg bg-[#0F172A]/50 hover:bg-[#0F172A] border border-[#334155] transition-colors">
                            <div className="flex items-center">
                              <div className="w-8 h-8 rounded-lg bg-[#8B5CF6]/20 flex items-center justify-center mr-3">
                                <svg className="w-4 h-4 text-[#8B5CF6]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                              </div>
                              <div>
                                <p className="text-white font-medium text-sm">Clear Cache</p>
                                <p className="text-[#94A3B8] text-xs">Clear application cache and temporary files</p>
                              </div>
                            </div>
                          </button>
                          <button className="w-full text-left px-4 py-3 rounded-lg bg-[#0F172A]/50 hover:bg-[#0F172A] border border-[#334155] transition-colors">
                            <div className="flex items-center">
                              <div className="w-8 h-8 rounded-lg bg-[#10B981]/20 flex items-center justify-center mr-3">
                                <svg className="w-4 h-4 text-[#10B981]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                </svg>
                              </div>
                              <div>
                                <p className="text-white font-medium text-sm">Backup Data</p>
                                <p className="text-[#94A3B8] text-xs">Create a backup of all application data</p>
                              </div>
                            </div>
                          </button>
                          <button className="w-full text-left px-4 py-3 rounded-lg bg-[#0F172A]/50 hover:bg-[#0F172A] border border-[#334155] transition-colors">
                            <div className="flex items-center">
                              <div className="w-8 h-8 rounded-lg bg-[#F59E0B]/20 flex items-center justify-center mr-3">
                                <svg className="w-4 h-4 text-[#F59E0B]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                                </svg>
                              </div>
                              <div>
                                <p className="text-white font-medium text-sm">Security Check</p>
                                <p className="text-[#94A3B8] text-xs">Run a security audit of the application</p>
                              </div>
                            </div>
                          </button>
                        </div>
                      </Card>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </main>
        </div>
      </div>
      
      {/* Default Footer */}
      <Footer />
    </div>
  );
}